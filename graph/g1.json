{
  "id": "dfs_article_1",
  "title": "Depth First Search (DFS)",
  "description": "An in-depth explanation of Depth First Search (DFS), including its algorithm, applications, and edge classifications.",
  "data": "### Depth First Search (DFS)\nDepth First Search (DFS) is a fundamental graph traversal algorithm that explores as far down a branch as possible before backtracking.\n\n#### Description of the Algorithm\nDFS starts from a source vertex and explores all adjacent vertices by recursively visiting each unvisited vertex. The process continues until no unvisited adjacent vertices remain, and then backtracking occurs. It operates in O(m + n) time where n is the number of vertices and m is the number of edges.\n\n#### Applications of DFS\n- **Find any path in a graph**: DFS can find any path from the source vertex to any other vertex in the graph.\n- **Check if a graph is acyclic**: DFS helps detect cycles in graphs by identifying back edges.\n- **Topological sorting**: Perform DFS on a directed graph to obtain a topological order of vertices.\n\n#### Edge Classification in DFS\n- **Tree Edge**: An edge that leads to a new vertex.\n- **Back Edge**: An edge pointing to an ancestor vertex.\n- **Forward Edge**: An edge that connects a vertex to its descendant.\n- **Cross Edge**: An edge that connects two vertices with no ancestor-descendant relationship.\n\n### DFS Implementation\nA simple DFS implementation is as follows:\n\n```cpp\nvector<vector<int>> adj;\nint n;\nvector<bool> visited;\n\nvoid dfs(int v) {\n    visited[v] = true;\n    for (int u : adj[v]) {\n        if (!visited[u])\n            dfs(u);\n    }\n}\n```\n\nTo track the entry and exit times of vertices, the following implementation can be used:\n\n```cpp\nvector<vector<int>> adj;\nint n;\nvector<int> color, time_in, time_out;\nint dfs_timer = 0;\n\nvoid dfs(int v) {\n    time_in[v] = dfs_timer++;\n    color[v] = 1;\n    for (int u : adj[v])\n        if (color[u] == 0)\n            dfs(u);\n    color[v] = 2;\n    time_out[v] = dfs_timer++;\n}\n```",
  "problems": [
    {
      "id": "dfs_problem_1",
      "name": "Find Connected Components",
      "difficulty": "Easy"
    },
    {
      "id": "dfs_problem_2",
      "name": "Detect Cycles in a Graph",
      "difficulty": "Medium"
    }
  ]
}
